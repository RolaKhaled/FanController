
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c54  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009ce  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 81 00 	call	0x102	; 0x102 <main>
  64:	0c 94 cc 03 	jmp	0x798	; 0x798 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_Timer0_Start>:
#include"dcmotor.h"
#include"gpio.h"
#include<avr/io.h>

void PWM_Timer0_Start(uint8 duty_cycle){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
  78:	e2 e5       	ldi	r30, 0x52	; 82
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	10 82       	st	Z, r1
	OCR0= duty_cycle;
  7e:	ec e5       	ldi	r30, 0x5C	; 92
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	80 83       	st	Z, r24
	DDRB  = DDRB | (1<<PB3);
  86:	a7 e3       	ldi	r26, 0x37	; 55
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	e7 e3       	ldi	r30, 0x37	; 55
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	8c 93       	st	X, r24
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  94:	e3 e5       	ldi	r30, 0x53	; 83
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8a e6       	ldi	r24, 0x6A	; 106
  9a:	80 83       	st	Z, r24
}
  9c:	0f 90       	pop	r0
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <DCMotor_init>:

void DCMotor_init(void){
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	0e 94 8e 00 	call	0x11c	; 0x11c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	0e 94 8e 00 	call	0x11c	; 0x11c <GPIO_setupPinDirection>
	//GPIO_writePin(PORTB_ID, PIN0_ID, 0);
	//GPIO_writePin(PORTB_ID, PIN1_ID, 0);/*stop motor at the beginning*/
}
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <DCMotor_rotate>:

void DCMotor_rotate(uint8 speed,DCMotor_State state){
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <DCMotor_rotate+0x6>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	6a 83       	std	Y+2, r22	; 0x02
	PORTB = (PORTB & 0xFC);
  d4:	a8 e3       	ldi	r26, 0x38	; 56
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e8 e3       	ldi	r30, 0x38	; 56
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8c 7f       	andi	r24, 0xFC	; 252
  e0:	8c 93       	st	X, r24
	PORTB|=state;
  e2:	a8 e3       	ldi	r26, 0x38	; 56
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e8 e3       	ldi	r30, 0x38	; 56
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	89 2b       	or	r24, r25
  f0:	8c 93       	st	X, r24
	PWM_Timer0_Start((uint8)MOTOR_MAX_SPEED*(speed/100));
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Timer0_Start>
}
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <main>:
#include"dcmotor.h"
#include<avr/io.h>



int main(void){
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
	void DCMotor_init(void);
	DCMotor_rotate(100,2);
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	0e 94 63 00 	call	0xc6	; 0xc6 <DCMotor_rotate>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
}
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

0000011c <GPIO_setupPinDirection>:
#include <avr/io.h>
#include "gpio.h"
#include "common_macros.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	00 d0       	rcall	.+0      	; 0x122 <GPIO_setupPinDirection+0x6>
 122:	00 d0       	rcall	.+0      	; 0x124 <GPIO_setupPinDirection+0x8>
 124:	0f 92       	push	r0
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	6a 83       	std	Y+2, r22	; 0x02
 12e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	08 f0       	brcs	.+2      	; 0x138 <GPIO_setupPinDirection+0x1c>
 136:	d5 c0       	rjmp	.+426    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	84 30       	cpi	r24, 0x04	; 4
 13c:	08 f0       	brcs	.+2      	; 0x140 <GPIO_setupPinDirection+0x24>
 13e:	d1 c0       	rjmp	.+418    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	3d 83       	std	Y+5, r19	; 0x05
 148:	2c 83       	std	Y+4, r18	; 0x04
 14a:	8c 81       	ldd	r24, Y+4	; 0x04
 14c:	9d 81       	ldd	r25, Y+5	; 0x05
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	91 05       	cpc	r25, r1
 152:	09 f4       	brne	.+2      	; 0x156 <GPIO_setupPinDirection+0x3a>
 154:	43 c0       	rjmp	.+134    	; 0x1dc <GPIO_setupPinDirection+0xc0>
 156:	2c 81       	ldd	r18, Y+4	; 0x04
 158:	3d 81       	ldd	r19, Y+5	; 0x05
 15a:	22 30       	cpi	r18, 0x02	; 2
 15c:	31 05       	cpc	r19, r1
 15e:	2c f4       	brge	.+10     	; 0x16a <GPIO_setupPinDirection+0x4e>
 160:	8c 81       	ldd	r24, Y+4	; 0x04
 162:	9d 81       	ldd	r25, Y+5	; 0x05
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	71 f0       	breq	.+28     	; 0x184 <GPIO_setupPinDirection+0x68>
 168:	bc c0       	rjmp	.+376    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
 16a:	2c 81       	ldd	r18, Y+4	; 0x04
 16c:	3d 81       	ldd	r19, Y+5	; 0x05
 16e:	22 30       	cpi	r18, 0x02	; 2
 170:	31 05       	cpc	r19, r1
 172:	09 f4       	brne	.+2      	; 0x176 <GPIO_setupPinDirection+0x5a>
 174:	5f c0       	rjmp	.+190    	; 0x234 <GPIO_setupPinDirection+0x118>
 176:	8c 81       	ldd	r24, Y+4	; 0x04
 178:	9d 81       	ldd	r25, Y+5	; 0x05
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	91 05       	cpc	r25, r1
 17e:	09 f4       	brne	.+2      	; 0x182 <GPIO_setupPinDirection+0x66>
 180:	85 c0       	rjmp	.+266    	; 0x28c <GPIO_setupPinDirection+0x170>
 182:	af c0       	rjmp	.+350    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	a1 f4       	brne	.+40     	; 0x1b2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 18a:	aa e3       	ldi	r26, 0x3A	; 58
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	ea e3       	ldi	r30, 0x3A	; 58
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	48 2f       	mov	r20, r24
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 2e       	mov	r0, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <GPIO_setupPinDirection+0x8c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <GPIO_setupPinDirection+0x88>
 1ac:	84 2b       	or	r24, r20
 1ae:	8c 93       	st	X, r24
 1b0:	98 c0       	rjmp	.+304    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 1b2:	aa e3       	ldi	r26, 0x3A	; 58
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	ea e3       	ldi	r30, 0x3A	; 58
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	48 2f       	mov	r20, r24
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GPIO_setupPinDirection+0xb4>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <GPIO_setupPinDirection+0xb0>
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8c 93       	st	X, r24
 1da:	83 c0       	rjmp	.+262    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	a1 f4       	brne	.+40     	; 0x20a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 1e2:	a7 e3       	ldi	r26, 0x37	; 55
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e7 e3       	ldi	r30, 0x37	; 55
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <GPIO_setupPinDirection+0xe4>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <GPIO_setupPinDirection+0xe0>
 204:	84 2b       	or	r24, r20
 206:	8c 93       	st	X, r24
 208:	6c c0       	rjmp	.+216    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 20a:	a7 e3       	ldi	r26, 0x37	; 55
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e7 e3       	ldi	r30, 0x37	; 55
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_setupPinDirection+0x10c>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_setupPinDirection+0x108>
 22c:	80 95       	com	r24
 22e:	84 23       	and	r24, r20
 230:	8c 93       	st	X, r24
 232:	57 c0       	rjmp	.+174    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	a1 f4       	brne	.+40     	; 0x262 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 23a:	a4 e3       	ldi	r26, 0x34	; 52
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e4 e3       	ldi	r30, 0x34	; 52
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <GPIO_setupPinDirection+0x13c>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <GPIO_setupPinDirection+0x138>
 25c:	84 2b       	or	r24, r20
 25e:	8c 93       	st	X, r24
 260:	40 c0       	rjmp	.+128    	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 262:	a4 e3       	ldi	r26, 0x34	; 52
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e4 e3       	ldi	r30, 0x34	; 52
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	48 2f       	mov	r20, r24
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 2e       	mov	r0, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <GPIO_setupPinDirection+0x164>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <GPIO_setupPinDirection+0x160>
 284:	80 95       	com	r24
 286:	84 23       	and	r24, r20
 288:	8c 93       	st	X, r24
 28a:	2b c0       	rjmp	.+86     	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	a1 f4       	brne	.+40     	; 0x2ba <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 292:	a1 e3       	ldi	r26, 0x31	; 49
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e1 e3       	ldi	r30, 0x31	; 49
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	48 2f       	mov	r20, r24
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 2e       	mov	r0, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <GPIO_setupPinDirection+0x194>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <GPIO_setupPinDirection+0x190>
 2b4:	84 2b       	or	r24, r20
 2b6:	8c 93       	st	X, r24
 2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 2ba:	a1 e3       	ldi	r26, 0x31	; 49
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e1 e3       	ldi	r30, 0x31	; 49
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <GPIO_setupPinDirection+0x1bc>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <GPIO_setupPinDirection+0x1b8>
 2dc:	80 95       	com	r24
 2de:	84 23       	and	r24, r20
 2e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	cf 91       	pop	r28
 2ee:	df 91       	pop	r29
 2f0:	08 95       	ret

000002f2 <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 2f2:	df 93       	push	r29
 2f4:	cf 93       	push	r28
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <GPIO_writePin+0x6>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <GPIO_writePin+0x8>
 2fa:	0f 92       	push	r0
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	6a 83       	std	Y+2, r22	; 0x02
 304:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	88 30       	cpi	r24, 0x08	; 8
 30a:	08 f0       	brcs	.+2      	; 0x30e <GPIO_writePin+0x1c>
 30c:	d5 c0       	rjmp	.+426    	; 0x4b8 <GPIO_writePin+0x1c6>
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	84 30       	cpi	r24, 0x04	; 4
 312:	08 f0       	brcs	.+2      	; 0x316 <GPIO_writePin+0x24>
 314:	d1 c0       	rjmp	.+418    	; 0x4b8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	3d 83       	std	Y+5, r19	; 0x05
 31e:	2c 83       	std	Y+4, r18	; 0x04
 320:	8c 81       	ldd	r24, Y+4	; 0x04
 322:	9d 81       	ldd	r25, Y+5	; 0x05
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	91 05       	cpc	r25, r1
 328:	09 f4       	brne	.+2      	; 0x32c <GPIO_writePin+0x3a>
 32a:	43 c0       	rjmp	.+134    	; 0x3b2 <GPIO_writePin+0xc0>
 32c:	2c 81       	ldd	r18, Y+4	; 0x04
 32e:	3d 81       	ldd	r19, Y+5	; 0x05
 330:	22 30       	cpi	r18, 0x02	; 2
 332:	31 05       	cpc	r19, r1
 334:	2c f4       	brge	.+10     	; 0x340 <GPIO_writePin+0x4e>
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	9d 81       	ldd	r25, Y+5	; 0x05
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	71 f0       	breq	.+28     	; 0x35a <GPIO_writePin+0x68>
 33e:	bc c0       	rjmp	.+376    	; 0x4b8 <GPIO_writePin+0x1c6>
 340:	2c 81       	ldd	r18, Y+4	; 0x04
 342:	3d 81       	ldd	r19, Y+5	; 0x05
 344:	22 30       	cpi	r18, 0x02	; 2
 346:	31 05       	cpc	r19, r1
 348:	09 f4       	brne	.+2      	; 0x34c <GPIO_writePin+0x5a>
 34a:	5f c0       	rjmp	.+190    	; 0x40a <GPIO_writePin+0x118>
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	9d 81       	ldd	r25, Y+5	; 0x05
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	91 05       	cpc	r25, r1
 354:	09 f4       	brne	.+2      	; 0x358 <GPIO_writePin+0x66>
 356:	85 c0       	rjmp	.+266    	; 0x462 <GPIO_writePin+0x170>
 358:	af c0       	rjmp	.+350    	; 0x4b8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	a1 f4       	brne	.+40     	; 0x388 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 360:	ab e3       	ldi	r26, 0x3B	; 59
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	eb e3       	ldi	r30, 0x3B	; 59
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	48 2f       	mov	r20, r24
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 2e       	mov	r0, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <GPIO_writePin+0x8c>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <GPIO_writePin+0x88>
 382:	84 2b       	or	r24, r20
 384:	8c 93       	st	X, r24
 386:	98 c0       	rjmp	.+304    	; 0x4b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 388:	ab e3       	ldi	r26, 0x3B	; 59
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	eb e3       	ldi	r30, 0x3B	; 59
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	48 2f       	mov	r20, r24
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <GPIO_writePin+0xb4>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <GPIO_writePin+0xb0>
 3aa:	80 95       	com	r24
 3ac:	84 23       	and	r24, r20
 3ae:	8c 93       	st	X, r24
 3b0:	83 c0       	rjmp	.+262    	; 0x4b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	a1 f4       	brne	.+40     	; 0x3e0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 3b8:	a8 e3       	ldi	r26, 0x38	; 56
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e8 e3       	ldi	r30, 0x38	; 56
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	48 2f       	mov	r20, r24
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <GPIO_writePin+0xe4>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <GPIO_writePin+0xe0>
 3da:	84 2b       	or	r24, r20
 3dc:	8c 93       	st	X, r24
 3de:	6c c0       	rjmp	.+216    	; 0x4b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 3e0:	a8 e3       	ldi	r26, 0x38	; 56
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e8 e3       	ldi	r30, 0x38	; 56
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	48 2f       	mov	r20, r24
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 2e       	mov	r0, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_writePin+0x10c>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_writePin+0x108>
 402:	80 95       	com	r24
 404:	84 23       	and	r24, r20
 406:	8c 93       	st	X, r24
 408:	57 c0       	rjmp	.+174    	; 0x4b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	a1 f4       	brne	.+40     	; 0x438 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 410:	a5 e3       	ldi	r26, 0x35	; 53
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	e5 e3       	ldi	r30, 0x35	; 53
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	48 2f       	mov	r20, r24
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 2e       	mov	r0, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <GPIO_writePin+0x13c>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <GPIO_writePin+0x138>
 432:	84 2b       	or	r24, r20
 434:	8c 93       	st	X, r24
 436:	40 c0       	rjmp	.+128    	; 0x4b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 438:	a5 e3       	ldi	r26, 0x35	; 53
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e5 e3       	ldi	r30, 0x35	; 53
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	48 2f       	mov	r20, r24
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <GPIO_writePin+0x164>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <GPIO_writePin+0x160>
 45a:	80 95       	com	r24
 45c:	84 23       	and	r24, r20
 45e:	8c 93       	st	X, r24
 460:	2b c0       	rjmp	.+86     	; 0x4b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	a1 f4       	brne	.+40     	; 0x490 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 468:	a2 e3       	ldi	r26, 0x32	; 50
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e2 e3       	ldi	r30, 0x32	; 50
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	48 2f       	mov	r20, r24
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 2e       	mov	r0, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <GPIO_writePin+0x194>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <GPIO_writePin+0x190>
 48a:	84 2b       	or	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	14 c0       	rjmp	.+40     	; 0x4b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 490:	a2 e3       	ldi	r26, 0x32	; 50
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	e2 e3       	ldi	r30, 0x32	; 50
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <GPIO_writePin+0x1bc>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <GPIO_writePin+0x1b8>
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	cf 91       	pop	r28
 4c4:	df 91       	pop	r29
 4c6:	08 95       	ret

000004c8 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 4c8:	df 93       	push	r29
 4ca:	cf 93       	push	r28
 4cc:	00 d0       	rcall	.+0      	; 0x4ce <GPIO_readPin+0x6>
 4ce:	00 d0       	rcall	.+0      	; 0x4d0 <GPIO_readPin+0x8>
 4d0:	0f 92       	push	r0
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	8a 83       	std	Y+2, r24	; 0x02
 4d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 4da:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	88 30       	cpi	r24, 0x08	; 8
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <GPIO_readPin+0x1c>
 4e2:	84 c0       	rjmp	.+264    	; 0x5ec <GPIO_readPin+0x124>
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	84 30       	cpi	r24, 0x04	; 4
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <GPIO_readPin+0x24>
 4ea:	80 c0       	rjmp	.+256    	; 0x5ec <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	3d 83       	std	Y+5, r19	; 0x05
 4f4:	2c 83       	std	Y+4, r18	; 0x04
 4f6:	4c 81       	ldd	r20, Y+4	; 0x04
 4f8:	5d 81       	ldd	r21, Y+5	; 0x05
 4fa:	41 30       	cpi	r20, 0x01	; 1
 4fc:	51 05       	cpc	r21, r1
 4fe:	79 f1       	breq	.+94     	; 0x55e <GPIO_readPin+0x96>
 500:	8c 81       	ldd	r24, Y+4	; 0x04
 502:	9d 81       	ldd	r25, Y+5	; 0x05
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	91 05       	cpc	r25, r1
 508:	34 f4       	brge	.+12     	; 0x516 <GPIO_readPin+0x4e>
 50a:	2c 81       	ldd	r18, Y+4	; 0x04
 50c:	3d 81       	ldd	r19, Y+5	; 0x05
 50e:	21 15       	cp	r18, r1
 510:	31 05       	cpc	r19, r1
 512:	69 f0       	breq	.+26     	; 0x52e <GPIO_readPin+0x66>
 514:	6b c0       	rjmp	.+214    	; 0x5ec <GPIO_readPin+0x124>
 516:	4c 81       	ldd	r20, Y+4	; 0x04
 518:	5d 81       	ldd	r21, Y+5	; 0x05
 51a:	42 30       	cpi	r20, 0x02	; 2
 51c:	51 05       	cpc	r21, r1
 51e:	b9 f1       	breq	.+110    	; 0x58e <GPIO_readPin+0xc6>
 520:	8c 81       	ldd	r24, Y+4	; 0x04
 522:	9d 81       	ldd	r25, Y+5	; 0x05
 524:	83 30       	cpi	r24, 0x03	; 3
 526:	91 05       	cpc	r25, r1
 528:	09 f4       	brne	.+2      	; 0x52c <GPIO_readPin+0x64>
 52a:	49 c0       	rjmp	.+146    	; 0x5be <GPIO_readPin+0xf6>
 52c:	5f c0       	rjmp	.+190    	; 0x5ec <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 52e:	e9 e3       	ldi	r30, 0x39	; 57
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	88 2f       	mov	r24, r24
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	a9 01       	movw	r20, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <GPIO_readPin+0x7e>
 542:	55 95       	asr	r21
 544:	47 95       	ror	r20
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <GPIO_readPin+0x7a>
 54a:	ca 01       	movw	r24, r20
 54c:	81 70       	andi	r24, 0x01	; 1
 54e:	90 70       	andi	r25, 0x00	; 0
 550:	88 23       	and	r24, r24
 552:	19 f0       	breq	.+6      	; 0x55a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	89 83       	std	Y+1, r24	; 0x01
 558:	49 c0       	rjmp	.+146    	; 0x5ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 55a:	19 82       	std	Y+1, r1	; 0x01
 55c:	47 c0       	rjmp	.+142    	; 0x5ec <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 55e:	e6 e3       	ldi	r30, 0x36	; 54
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	a9 01       	movw	r20, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <GPIO_readPin+0xae>
 572:	55 95       	asr	r21
 574:	47 95       	ror	r20
 576:	8a 95       	dec	r24
 578:	e2 f7       	brpl	.-8      	; 0x572 <GPIO_readPin+0xaa>
 57a:	ca 01       	movw	r24, r20
 57c:	81 70       	andi	r24, 0x01	; 1
 57e:	90 70       	andi	r25, 0x00	; 0
 580:	88 23       	and	r24, r24
 582:	19 f0       	breq	.+6      	; 0x58a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	31 c0       	rjmp	.+98     	; 0x5ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 58a:	19 82       	std	Y+1, r1	; 0x01
 58c:	2f c0       	rjmp	.+94     	; 0x5ec <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 58e:	e3 e3       	ldi	r30, 0x33	; 51
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	88 2f       	mov	r24, r24
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	a9 01       	movw	r20, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <GPIO_readPin+0xde>
 5a2:	55 95       	asr	r21
 5a4:	47 95       	ror	r20
 5a6:	8a 95       	dec	r24
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <GPIO_readPin+0xda>
 5aa:	ca 01       	movw	r24, r20
 5ac:	81 70       	andi	r24, 0x01	; 1
 5ae:	90 70       	andi	r25, 0x00	; 0
 5b0:	88 23       	and	r24, r24
 5b2:	19 f0       	breq	.+6      	; 0x5ba <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	89 83       	std	Y+1, r24	; 0x01
 5b8:	19 c0       	rjmp	.+50     	; 0x5ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5ba:	19 82       	std	Y+1, r1	; 0x01
 5bc:	17 c0       	rjmp	.+46     	; 0x5ec <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 5be:	e0 e3       	ldi	r30, 0x30	; 48
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	88 2f       	mov	r24, r24
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	a9 01       	movw	r20, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <GPIO_readPin+0x10e>
 5d2:	55 95       	asr	r21
 5d4:	47 95       	ror	r20
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <GPIO_readPin+0x10a>
 5da:	ca 01       	movw	r24, r20
 5dc:	81 70       	andi	r24, 0x01	; 1
 5de:	90 70       	andi	r25, 0x00	; 0
 5e0:	88 23       	and	r24, r24
 5e2:	19 f0       	breq	.+6      	; 0x5ea <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	89 83       	std	Y+1, r24	; 0x01
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5ea:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	cf 91       	pop	r28
 5fa:	df 91       	pop	r29
 5fc:	08 95       	ret

000005fe <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 5fe:	df 93       	push	r29
 600:	cf 93       	push	r28
 602:	00 d0       	rcall	.+0      	; 0x604 <GPIO_setupPortDirection+0x6>
 604:	00 d0       	rcall	.+0      	; 0x606 <GPIO_setupPortDirection+0x8>
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	84 30       	cpi	r24, 0x04	; 4
 612:	90 f5       	brcc	.+100    	; 0x678 <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	3c 83       	std	Y+4, r19	; 0x04
 61c:	2b 83       	std	Y+3, r18	; 0x03
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	9c 81       	ldd	r25, Y+4	; 0x04
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	91 05       	cpc	r25, r1
 626:	d1 f0       	breq	.+52     	; 0x65c <GPIO_setupPortDirection+0x5e>
 628:	2b 81       	ldd	r18, Y+3	; 0x03
 62a:	3c 81       	ldd	r19, Y+4	; 0x04
 62c:	22 30       	cpi	r18, 0x02	; 2
 62e:	31 05       	cpc	r19, r1
 630:	2c f4       	brge	.+10     	; 0x63c <GPIO_setupPortDirection+0x3e>
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	9c 81       	ldd	r25, Y+4	; 0x04
 636:	00 97       	sbiw	r24, 0x00	; 0
 638:	61 f0       	breq	.+24     	; 0x652 <GPIO_setupPortDirection+0x54>
 63a:	1e c0       	rjmp	.+60     	; 0x678 <GPIO_setupPortDirection+0x7a>
 63c:	2b 81       	ldd	r18, Y+3	; 0x03
 63e:	3c 81       	ldd	r19, Y+4	; 0x04
 640:	22 30       	cpi	r18, 0x02	; 2
 642:	31 05       	cpc	r19, r1
 644:	81 f0       	breq	.+32     	; 0x666 <GPIO_setupPortDirection+0x68>
 646:	8b 81       	ldd	r24, Y+3	; 0x03
 648:	9c 81       	ldd	r25, Y+4	; 0x04
 64a:	83 30       	cpi	r24, 0x03	; 3
 64c:	91 05       	cpc	r25, r1
 64e:	81 f0       	breq	.+32     	; 0x670 <GPIO_setupPortDirection+0x72>
 650:	13 c0       	rjmp	.+38     	; 0x678 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 652:	ea e3       	ldi	r30, 0x3A	; 58
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	8a 81       	ldd	r24, Y+2	; 0x02
 658:	80 83       	st	Z, r24
 65a:	0e c0       	rjmp	.+28     	; 0x678 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 65c:	e7 e3       	ldi	r30, 0x37	; 55
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	8a 81       	ldd	r24, Y+2	; 0x02
 662:	80 83       	st	Z, r24
 664:	09 c0       	rjmp	.+18     	; 0x678 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 666:	e4 e3       	ldi	r30, 0x34	; 52
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	80 83       	st	Z, r24
 66e:	04 c0       	rjmp	.+8      	; 0x678 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 670:	e1 e3       	ldi	r30, 0x31	; 49
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	80 83       	st	Z, r24
			break;
		}
	}
}
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	cf 91       	pop	r28
 682:	df 91       	pop	r29
 684:	08 95       	ret

00000686 <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
 686:	df 93       	push	r29
 688:	cf 93       	push	r28
 68a:	00 d0       	rcall	.+0      	; 0x68c <GPIO_writePort+0x6>
 68c:	00 d0       	rcall	.+0      	; 0x68e <GPIO_writePort+0x8>
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	89 83       	std	Y+1, r24	; 0x01
 694:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	84 30       	cpi	r24, 0x04	; 4
 69a:	90 f5       	brcc	.+100    	; 0x700 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	28 2f       	mov	r18, r24
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	3c 83       	std	Y+4, r19	; 0x04
 6a4:	2b 83       	std	Y+3, r18	; 0x03
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	9c 81       	ldd	r25, Y+4	; 0x04
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	91 05       	cpc	r25, r1
 6ae:	d1 f0       	breq	.+52     	; 0x6e4 <GPIO_writePort+0x5e>
 6b0:	2b 81       	ldd	r18, Y+3	; 0x03
 6b2:	3c 81       	ldd	r19, Y+4	; 0x04
 6b4:	22 30       	cpi	r18, 0x02	; 2
 6b6:	31 05       	cpc	r19, r1
 6b8:	2c f4       	brge	.+10     	; 0x6c4 <GPIO_writePort+0x3e>
 6ba:	8b 81       	ldd	r24, Y+3	; 0x03
 6bc:	9c 81       	ldd	r25, Y+4	; 0x04
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	61 f0       	breq	.+24     	; 0x6da <GPIO_writePort+0x54>
 6c2:	1e c0       	rjmp	.+60     	; 0x700 <GPIO_writePort+0x7a>
 6c4:	2b 81       	ldd	r18, Y+3	; 0x03
 6c6:	3c 81       	ldd	r19, Y+4	; 0x04
 6c8:	22 30       	cpi	r18, 0x02	; 2
 6ca:	31 05       	cpc	r19, r1
 6cc:	81 f0       	breq	.+32     	; 0x6ee <GPIO_writePort+0x68>
 6ce:	8b 81       	ldd	r24, Y+3	; 0x03
 6d0:	9c 81       	ldd	r25, Y+4	; 0x04
 6d2:	83 30       	cpi	r24, 0x03	; 3
 6d4:	91 05       	cpc	r25, r1
 6d6:	81 f0       	breq	.+32     	; 0x6f8 <GPIO_writePort+0x72>
 6d8:	13 c0       	rjmp	.+38     	; 0x700 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 6da:	eb e3       	ldi	r30, 0x3B	; 59
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	80 83       	st	Z, r24
 6e2:	0e c0       	rjmp	.+28     	; 0x700 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 6e4:	e8 e3       	ldi	r30, 0x38	; 56
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ea:	80 83       	st	Z, r24
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 6ee:	e5 e3       	ldi	r30, 0x35	; 53
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	80 83       	st	Z, r24
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 6f8:	e2 e3       	ldi	r30, 0x32	; 50
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	80 83       	st	Z, r24
			break;
		}
	}
}
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	cf 91       	pop	r28
 70a:	df 91       	pop	r29
 70c:	08 95       	ret

0000070e <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num)
{
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	00 d0       	rcall	.+0      	; 0x714 <GPIO_readPort+0x6>
 714:	00 d0       	rcall	.+0      	; 0x716 <GPIO_readPort+0x8>
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 71c:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	84 30       	cpi	r24, 0x04	; 4
 722:	90 f5       	brcc	.+100    	; 0x788 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	28 2f       	mov	r18, r24
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	3c 83       	std	Y+4, r19	; 0x04
 72c:	2b 83       	std	Y+3, r18	; 0x03
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	9c 81       	ldd	r25, Y+4	; 0x04
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	91 05       	cpc	r25, r1
 736:	d1 f0       	breq	.+52     	; 0x76c <GPIO_readPort+0x5e>
 738:	2b 81       	ldd	r18, Y+3	; 0x03
 73a:	3c 81       	ldd	r19, Y+4	; 0x04
 73c:	22 30       	cpi	r18, 0x02	; 2
 73e:	31 05       	cpc	r19, r1
 740:	2c f4       	brge	.+10     	; 0x74c <GPIO_readPort+0x3e>
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	9c 81       	ldd	r25, Y+4	; 0x04
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	61 f0       	breq	.+24     	; 0x762 <GPIO_readPort+0x54>
 74a:	1e c0       	rjmp	.+60     	; 0x788 <GPIO_readPort+0x7a>
 74c:	2b 81       	ldd	r18, Y+3	; 0x03
 74e:	3c 81       	ldd	r19, Y+4	; 0x04
 750:	22 30       	cpi	r18, 0x02	; 2
 752:	31 05       	cpc	r19, r1
 754:	81 f0       	breq	.+32     	; 0x776 <GPIO_readPort+0x68>
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	9c 81       	ldd	r25, Y+4	; 0x04
 75a:	83 30       	cpi	r24, 0x03	; 3
 75c:	91 05       	cpc	r25, r1
 75e:	81 f0       	breq	.+32     	; 0x780 <GPIO_readPort+0x72>
 760:	13 c0       	rjmp	.+38     	; 0x788 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 762:	e9 e3       	ldi	r30, 0x39	; 57
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	89 83       	std	Y+1, r24	; 0x01
 76a:	0e c0       	rjmp	.+28     	; 0x788 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 76c:	e6 e3       	ldi	r30, 0x36	; 54
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	09 c0       	rjmp	.+18     	; 0x788 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 776:	e3 e3       	ldi	r30, 0x33	; 51
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	89 83       	std	Y+1, r24	; 0x01
 77e:	04 c0       	rjmp	.+8      	; 0x788 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 780:	e0 e3       	ldi	r30, 0x30	; 48
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 788:	89 81       	ldd	r24, Y+1	; 0x01
}
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	cf 91       	pop	r28
 794:	df 91       	pop	r29
 796:	08 95       	ret

00000798 <_exit>:
 798:	f8 94       	cli

0000079a <__stop_program>:
 79a:	ff cf       	rjmp	.-2      	; 0x79a <__stop_program>
