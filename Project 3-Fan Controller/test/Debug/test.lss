
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c60  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009cf  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
  64:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DCMotor_init>:
#include"dcmotor.h"
#include"gpio.h"
#include<avr/io.h>
void PWM_Timer0_Start(uint8 duty_cycle);

void DCMotor_init(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	60 e0       	ldi	r22, 0x00	; 0
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	0e 94 74 00 	call	0xe8	; 0xe8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <GPIO_setupPinDirection>
	PORTB&=~(1<<1)&~(1<<0); /*stop motor at the beginning*/
  88:	a8 e3       	ldi	r26, 0x38	; 56
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e8 e3       	ldi	r30, 0x38	; 56
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8c 7f       	andi	r24, 0xFC	; 252
  94:	8c 93       	st	X, r24
}
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	08 95       	ret

0000009c <DCMotor_rotate>:

void DCMotor_rotate(uint8 speed,DCMotor_State state){
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	00 d0       	rcall	.+0      	; 0xa2 <DCMotor_rotate+0x6>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	89 83       	std	Y+1, r24	; 0x01
  a8:	6a 83       	std	Y+2, r22	; 0x02
	PORTB = (PORTB & 0x3F);
  aa:	a8 e3       	ldi	r26, 0x38	; 56
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e8 e3       	ldi	r30, 0x38	; 56
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8f 73       	andi	r24, 0x3F	; 63
  b6:	8c 93       	st	X, r24
	PORTB|=state;
  b8:	a8 e3       	ldi	r26, 0x38	; 56
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e8 e3       	ldi	r30, 0x38	; 56
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	89 2b       	or	r24, r25
  c6:	8c 93       	st	X, r24
	PWM_Timer0_Start(MOTOR_MAX_SPEED*(speed/100));
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	94 e6       	ldi	r25, 0x64	; 100
  cc:	69 2f       	mov	r22, r25
  ce:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__udivmodqi4>
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	98 2f       	mov	r25, r24
  d8:	88 27       	eor	r24, r24
  da:	0e 94 b2 03 	call	0x764	; 0x764 <PWM_Timer0_Start>
}
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <GPIO_setupPinDirection>:
#include <avr/io.h>
#include "gpio.h"
#include "common_macros.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <GPIO_setupPinDirection+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <GPIO_setupPinDirection+0x8>
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	6a 83       	std	Y+2, r22	; 0x02
  fa:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	08 f0       	brcs	.+2      	; 0x104 <GPIO_setupPinDirection+0x1c>
 102:	d5 c0       	rjmp	.+426    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	08 f0       	brcs	.+2      	; 0x10c <GPIO_setupPinDirection+0x24>
 10a:	d1 c0       	rjmp	.+418    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	3d 83       	std	Y+5, r19	; 0x05
 114:	2c 83       	std	Y+4, r18	; 0x04
 116:	8c 81       	ldd	r24, Y+4	; 0x04
 118:	9d 81       	ldd	r25, Y+5	; 0x05
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	91 05       	cpc	r25, r1
 11e:	09 f4       	brne	.+2      	; 0x122 <GPIO_setupPinDirection+0x3a>
 120:	43 c0       	rjmp	.+134    	; 0x1a8 <GPIO_setupPinDirection+0xc0>
 122:	2c 81       	ldd	r18, Y+4	; 0x04
 124:	3d 81       	ldd	r19, Y+5	; 0x05
 126:	22 30       	cpi	r18, 0x02	; 2
 128:	31 05       	cpc	r19, r1
 12a:	2c f4       	brge	.+10     	; 0x136 <GPIO_setupPinDirection+0x4e>
 12c:	8c 81       	ldd	r24, Y+4	; 0x04
 12e:	9d 81       	ldd	r25, Y+5	; 0x05
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	71 f0       	breq	.+28     	; 0x150 <GPIO_setupPinDirection+0x68>
 134:	bc c0       	rjmp	.+376    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
 136:	2c 81       	ldd	r18, Y+4	; 0x04
 138:	3d 81       	ldd	r19, Y+5	; 0x05
 13a:	22 30       	cpi	r18, 0x02	; 2
 13c:	31 05       	cpc	r19, r1
 13e:	09 f4       	brne	.+2      	; 0x142 <GPIO_setupPinDirection+0x5a>
 140:	5f c0       	rjmp	.+190    	; 0x200 <GPIO_setupPinDirection+0x118>
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	9d 81       	ldd	r25, Y+5	; 0x05
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	91 05       	cpc	r25, r1
 14a:	09 f4       	brne	.+2      	; 0x14e <GPIO_setupPinDirection+0x66>
 14c:	85 c0       	rjmp	.+266    	; 0x258 <GPIO_setupPinDirection+0x170>
 14e:	af c0       	rjmp	.+350    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	a1 f4       	brne	.+40     	; 0x17e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 156:	aa e3       	ldi	r26, 0x3A	; 58
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	ea e3       	ldi	r30, 0x3A	; 58
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <GPIO_setupPinDirection+0x8c>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <GPIO_setupPinDirection+0x88>
 178:	84 2b       	or	r24, r20
 17a:	8c 93       	st	X, r24
 17c:	98 c0       	rjmp	.+304    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 17e:	aa e3       	ldi	r26, 0x3A	; 58
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	ea e3       	ldi	r30, 0x3A	; 58
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	48 2f       	mov	r20, r24
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 2e       	mov	r0, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <GPIO_setupPinDirection+0xb4>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <GPIO_setupPinDirection+0xb0>
 1a0:	80 95       	com	r24
 1a2:	84 23       	and	r24, r20
 1a4:	8c 93       	st	X, r24
 1a6:	83 c0       	rjmp	.+262    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	a1 f4       	brne	.+40     	; 0x1d6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 1ae:	a7 e3       	ldi	r26, 0x37	; 55
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e7 e3       	ldi	r30, 0x37	; 55
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <GPIO_setupPinDirection+0xe4>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <GPIO_setupPinDirection+0xe0>
 1d0:	84 2b       	or	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	6c c0       	rjmp	.+216    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 1d6:	a7 e3       	ldi	r26, 0x37	; 55
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <GPIO_setupPinDirection+0x10c>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <GPIO_setupPinDirection+0x108>
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	57 c0       	rjmp	.+174    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	a1 f4       	brne	.+40     	; 0x22e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 206:	a4 e3       	ldi	r26, 0x34	; 52
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e4 e3       	ldi	r30, 0x34	; 52
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <GPIO_setupPinDirection+0x13c>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <GPIO_setupPinDirection+0x138>
 228:	84 2b       	or	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	40 c0       	rjmp	.+128    	; 0x2ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 22e:	a4 e3       	ldi	r26, 0x34	; 52
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e4 e3       	ldi	r30, 0x34	; 52
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	48 2f       	mov	r20, r24
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_setupPinDirection+0x164>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_setupPinDirection+0x160>
 250:	80 95       	com	r24
 252:	84 23       	and	r24, r20
 254:	8c 93       	st	X, r24
 256:	2b c0       	rjmp	.+86     	; 0x2ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	a1 f4       	brne	.+40     	; 0x286 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 25e:	a1 e3       	ldi	r26, 0x31	; 49
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	e1 e3       	ldi	r30, 0x31	; 49
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	48 2f       	mov	r20, r24
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 2e       	mov	r0, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <GPIO_setupPinDirection+0x194>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <GPIO_setupPinDirection+0x190>
 280:	84 2b       	or	r24, r20
 282:	8c 93       	st	X, r24
 284:	14 c0       	rjmp	.+40     	; 0x2ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 286:	a1 e3       	ldi	r26, 0x31	; 49
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e1 e3       	ldi	r30, 0x31	; 49
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 2e       	mov	r0, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <GPIO_setupPinDirection+0x1bc>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <GPIO_setupPinDirection+0x1b8>
 2a8:	80 95       	com	r24
 2aa:	84 23       	and	r24, r20
 2ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	cf 91       	pop	r28
 2ba:	df 91       	pop	r29
 2bc:	08 95       	ret

000002be <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <GPIO_writePin+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <GPIO_writePin+0x8>
 2c6:	0f 92       	push	r0
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	6a 83       	std	Y+2, r22	; 0x02
 2d0:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	88 30       	cpi	r24, 0x08	; 8
 2d6:	08 f0       	brcs	.+2      	; 0x2da <GPIO_writePin+0x1c>
 2d8:	d5 c0       	rjmp	.+426    	; 0x484 <GPIO_writePin+0x1c6>
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	84 30       	cpi	r24, 0x04	; 4
 2de:	08 f0       	brcs	.+2      	; 0x2e2 <GPIO_writePin+0x24>
 2e0:	d1 c0       	rjmp	.+418    	; 0x484 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	3d 83       	std	Y+5, r19	; 0x05
 2ea:	2c 83       	std	Y+4, r18	; 0x04
 2ec:	8c 81       	ldd	r24, Y+4	; 0x04
 2ee:	9d 81       	ldd	r25, Y+5	; 0x05
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	91 05       	cpc	r25, r1
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <GPIO_writePin+0x3a>
 2f6:	43 c0       	rjmp	.+134    	; 0x37e <GPIO_writePin+0xc0>
 2f8:	2c 81       	ldd	r18, Y+4	; 0x04
 2fa:	3d 81       	ldd	r19, Y+5	; 0x05
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	31 05       	cpc	r19, r1
 300:	2c f4       	brge	.+10     	; 0x30c <GPIO_writePin+0x4e>
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	9d 81       	ldd	r25, Y+5	; 0x05
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	71 f0       	breq	.+28     	; 0x326 <GPIO_writePin+0x68>
 30a:	bc c0       	rjmp	.+376    	; 0x484 <GPIO_writePin+0x1c6>
 30c:	2c 81       	ldd	r18, Y+4	; 0x04
 30e:	3d 81       	ldd	r19, Y+5	; 0x05
 310:	22 30       	cpi	r18, 0x02	; 2
 312:	31 05       	cpc	r19, r1
 314:	09 f4       	brne	.+2      	; 0x318 <GPIO_writePin+0x5a>
 316:	5f c0       	rjmp	.+190    	; 0x3d6 <GPIO_writePin+0x118>
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	9d 81       	ldd	r25, Y+5	; 0x05
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	91 05       	cpc	r25, r1
 320:	09 f4       	brne	.+2      	; 0x324 <GPIO_writePin+0x66>
 322:	85 c0       	rjmp	.+266    	; 0x42e <GPIO_writePin+0x170>
 324:	af c0       	rjmp	.+350    	; 0x484 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	a1 f4       	brne	.+40     	; 0x354 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 32c:	ab e3       	ldi	r26, 0x3B	; 59
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	eb e3       	ldi	r30, 0x3B	; 59
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <GPIO_writePin+0x8c>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <GPIO_writePin+0x88>
 34e:	84 2b       	or	r24, r20
 350:	8c 93       	st	X, r24
 352:	98 c0       	rjmp	.+304    	; 0x484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 354:	ab e3       	ldi	r26, 0x3B	; 59
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	eb e3       	ldi	r30, 0x3B	; 59
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_writePin+0xb4>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_writePin+0xb0>
 376:	80 95       	com	r24
 378:	84 23       	and	r24, r20
 37a:	8c 93       	st	X, r24
 37c:	83 c0       	rjmp	.+262    	; 0x484 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	a1 f4       	brne	.+40     	; 0x3ac <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 384:	a8 e3       	ldi	r26, 0x38	; 56
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e8 e3       	ldi	r30, 0x38	; 56
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 2e       	mov	r0, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <GPIO_writePin+0xe4>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <GPIO_writePin+0xe0>
 3a6:	84 2b       	or	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	6c c0       	rjmp	.+216    	; 0x484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 3ac:	a8 e3       	ldi	r26, 0x38	; 56
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e8 e3       	ldi	r30, 0x38	; 56
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 2e       	mov	r0, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <GPIO_writePin+0x10c>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <GPIO_writePin+0x108>
 3ce:	80 95       	com	r24
 3d0:	84 23       	and	r24, r20
 3d2:	8c 93       	st	X, r24
 3d4:	57 c0       	rjmp	.+174    	; 0x484 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	a1 f4       	brne	.+40     	; 0x404 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 3dc:	a5 e3       	ldi	r26, 0x35	; 53
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e5 e3       	ldi	r30, 0x35	; 53
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 2e       	mov	r0, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <GPIO_writePin+0x13c>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <GPIO_writePin+0x138>
 3fe:	84 2b       	or	r24, r20
 400:	8c 93       	st	X, r24
 402:	40 c0       	rjmp	.+128    	; 0x484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 404:	a5 e3       	ldi	r26, 0x35	; 53
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e5 e3       	ldi	r30, 0x35	; 53
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <GPIO_writePin+0x164>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <GPIO_writePin+0x160>
 426:	80 95       	com	r24
 428:	84 23       	and	r24, r20
 42a:	8c 93       	st	X, r24
 42c:	2b c0       	rjmp	.+86     	; 0x484 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	a1 f4       	brne	.+40     	; 0x45c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 434:	a2 e3       	ldi	r26, 0x32	; 50
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	e2 e3       	ldi	r30, 0x32	; 50
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	48 2f       	mov	r20, r24
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 2e       	mov	r0, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <GPIO_writePin+0x194>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <GPIO_writePin+0x190>
 456:	84 2b       	or	r24, r20
 458:	8c 93       	st	X, r24
 45a:	14 c0       	rjmp	.+40     	; 0x484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 45c:	a2 e3       	ldi	r26, 0x32	; 50
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e2 e3       	ldi	r30, 0x32	; 50
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 2e       	mov	r0, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <GPIO_writePin+0x1bc>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <GPIO_writePin+0x1b8>
 47e:	80 95       	com	r24
 480:	84 23       	and	r24, r20
 482:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	cf 91       	pop	r28
 490:	df 91       	pop	r29
 492:	08 95       	ret

00000494 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 494:	df 93       	push	r29
 496:	cf 93       	push	r28
 498:	00 d0       	rcall	.+0      	; 0x49a <GPIO_readPin+0x6>
 49a:	00 d0       	rcall	.+0      	; 0x49c <GPIO_readPin+0x8>
 49c:	0f 92       	push	r0
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	8a 83       	std	Y+2, r24	; 0x02
 4a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 4a6:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	88 30       	cpi	r24, 0x08	; 8
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <GPIO_readPin+0x1c>
 4ae:	84 c0       	rjmp	.+264    	; 0x5b8 <GPIO_readPin+0x124>
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	84 30       	cpi	r24, 0x04	; 4
 4b4:	08 f0       	brcs	.+2      	; 0x4b8 <GPIO_readPin+0x24>
 4b6:	80 c0       	rjmp	.+256    	; 0x5b8 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	3d 83       	std	Y+5, r19	; 0x05
 4c0:	2c 83       	std	Y+4, r18	; 0x04
 4c2:	4c 81       	ldd	r20, Y+4	; 0x04
 4c4:	5d 81       	ldd	r21, Y+5	; 0x05
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	51 05       	cpc	r21, r1
 4ca:	79 f1       	breq	.+94     	; 0x52a <GPIO_readPin+0x96>
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	9d 81       	ldd	r25, Y+5	; 0x05
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	91 05       	cpc	r25, r1
 4d4:	34 f4       	brge	.+12     	; 0x4e2 <GPIO_readPin+0x4e>
 4d6:	2c 81       	ldd	r18, Y+4	; 0x04
 4d8:	3d 81       	ldd	r19, Y+5	; 0x05
 4da:	21 15       	cp	r18, r1
 4dc:	31 05       	cpc	r19, r1
 4de:	69 f0       	breq	.+26     	; 0x4fa <GPIO_readPin+0x66>
 4e0:	6b c0       	rjmp	.+214    	; 0x5b8 <GPIO_readPin+0x124>
 4e2:	4c 81       	ldd	r20, Y+4	; 0x04
 4e4:	5d 81       	ldd	r21, Y+5	; 0x05
 4e6:	42 30       	cpi	r20, 0x02	; 2
 4e8:	51 05       	cpc	r21, r1
 4ea:	b9 f1       	breq	.+110    	; 0x55a <GPIO_readPin+0xc6>
 4ec:	8c 81       	ldd	r24, Y+4	; 0x04
 4ee:	9d 81       	ldd	r25, Y+5	; 0x05
 4f0:	83 30       	cpi	r24, 0x03	; 3
 4f2:	91 05       	cpc	r25, r1
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <GPIO_readPin+0x64>
 4f6:	49 c0       	rjmp	.+146    	; 0x58a <GPIO_readPin+0xf6>
 4f8:	5f c0       	rjmp	.+190    	; 0x5b8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 4fa:	e9 e3       	ldi	r30, 0x39	; 57
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	a9 01       	movw	r20, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <GPIO_readPin+0x7e>
 50e:	55 95       	asr	r21
 510:	47 95       	ror	r20
 512:	8a 95       	dec	r24
 514:	e2 f7       	brpl	.-8      	; 0x50e <GPIO_readPin+0x7a>
 516:	ca 01       	movw	r24, r20
 518:	81 70       	andi	r24, 0x01	; 1
 51a:	90 70       	andi	r25, 0x00	; 0
 51c:	88 23       	and	r24, r24
 51e:	19 f0       	breq	.+6      	; 0x526 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	49 c0       	rjmp	.+146    	; 0x5b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 526:	19 82       	std	Y+1, r1	; 0x01
 528:	47 c0       	rjmp	.+142    	; 0x5b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 52a:	e6 e3       	ldi	r30, 0x36	; 54
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	28 2f       	mov	r18, r24
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	88 2f       	mov	r24, r24
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	a9 01       	movw	r20, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <GPIO_readPin+0xae>
 53e:	55 95       	asr	r21
 540:	47 95       	ror	r20
 542:	8a 95       	dec	r24
 544:	e2 f7       	brpl	.-8      	; 0x53e <GPIO_readPin+0xaa>
 546:	ca 01       	movw	r24, r20
 548:	81 70       	andi	r24, 0x01	; 1
 54a:	90 70       	andi	r25, 0x00	; 0
 54c:	88 23       	and	r24, r24
 54e:	19 f0       	breq	.+6      	; 0x556 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	89 83       	std	Y+1, r24	; 0x01
 554:	31 c0       	rjmp	.+98     	; 0x5b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 556:	19 82       	std	Y+1, r1	; 0x01
 558:	2f c0       	rjmp	.+94     	; 0x5b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 55a:	e3 e3       	ldi	r30, 0x33	; 51
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	88 2f       	mov	r24, r24
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	a9 01       	movw	r20, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <GPIO_readPin+0xde>
 56e:	55 95       	asr	r21
 570:	47 95       	ror	r20
 572:	8a 95       	dec	r24
 574:	e2 f7       	brpl	.-8      	; 0x56e <GPIO_readPin+0xda>
 576:	ca 01       	movw	r24, r20
 578:	81 70       	andi	r24, 0x01	; 1
 57a:	90 70       	andi	r25, 0x00	; 0
 57c:	88 23       	and	r24, r24
 57e:	19 f0       	breq	.+6      	; 0x586 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	89 83       	std	Y+1, r24	; 0x01
 584:	19 c0       	rjmp	.+50     	; 0x5b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 586:	19 82       	std	Y+1, r1	; 0x01
 588:	17 c0       	rjmp	.+46     	; 0x5b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 58a:	e0 e3       	ldi	r30, 0x30	; 48
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	a9 01       	movw	r20, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <GPIO_readPin+0x10e>
 59e:	55 95       	asr	r21
 5a0:	47 95       	ror	r20
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <GPIO_readPin+0x10a>
 5a6:	ca 01       	movw	r24, r20
 5a8:	81 70       	andi	r24, 0x01	; 1
 5aa:	90 70       	andi	r25, 0x00	; 0
 5ac:	88 23       	and	r24, r24
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	89 83       	std	Y+1, r24	; 0x01
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5b6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 5b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	08 95       	ret

000005ca <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 5ca:	df 93       	push	r29
 5cc:	cf 93       	push	r28
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <GPIO_setupPortDirection+0x6>
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <GPIO_setupPortDirection+0x8>
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	89 83       	std	Y+1, r24	; 0x01
 5d8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 5da:	89 81       	ldd	r24, Y+1	; 0x01
 5dc:	84 30       	cpi	r24, 0x04	; 4
 5de:	90 f5       	brcc	.+100    	; 0x644 <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	3c 83       	std	Y+4, r19	; 0x04
 5e8:	2b 83       	std	Y+3, r18	; 0x03
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	9c 81       	ldd	r25, Y+4	; 0x04
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	91 05       	cpc	r25, r1
 5f2:	d1 f0       	breq	.+52     	; 0x628 <GPIO_setupPortDirection+0x5e>
 5f4:	2b 81       	ldd	r18, Y+3	; 0x03
 5f6:	3c 81       	ldd	r19, Y+4	; 0x04
 5f8:	22 30       	cpi	r18, 0x02	; 2
 5fa:	31 05       	cpc	r19, r1
 5fc:	2c f4       	brge	.+10     	; 0x608 <GPIO_setupPortDirection+0x3e>
 5fe:	8b 81       	ldd	r24, Y+3	; 0x03
 600:	9c 81       	ldd	r25, Y+4	; 0x04
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	61 f0       	breq	.+24     	; 0x61e <GPIO_setupPortDirection+0x54>
 606:	1e c0       	rjmp	.+60     	; 0x644 <GPIO_setupPortDirection+0x7a>
 608:	2b 81       	ldd	r18, Y+3	; 0x03
 60a:	3c 81       	ldd	r19, Y+4	; 0x04
 60c:	22 30       	cpi	r18, 0x02	; 2
 60e:	31 05       	cpc	r19, r1
 610:	81 f0       	breq	.+32     	; 0x632 <GPIO_setupPortDirection+0x68>
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	9c 81       	ldd	r25, Y+4	; 0x04
 616:	83 30       	cpi	r24, 0x03	; 3
 618:	91 05       	cpc	r25, r1
 61a:	81 f0       	breq	.+32     	; 0x63c <GPIO_setupPortDirection+0x72>
 61c:	13 c0       	rjmp	.+38     	; 0x644 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 61e:	ea e3       	ldi	r30, 0x3A	; 58
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	8a 81       	ldd	r24, Y+2	; 0x02
 624:	80 83       	st	Z, r24
 626:	0e c0       	rjmp	.+28     	; 0x644 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 628:	e7 e3       	ldi	r30, 0x37	; 55
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	8a 81       	ldd	r24, Y+2	; 0x02
 62e:	80 83       	st	Z, r24
 630:	09 c0       	rjmp	.+18     	; 0x644 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 632:	e4 e3       	ldi	r30, 0x34	; 52
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	80 83       	st	Z, r24
 63a:	04 c0       	rjmp	.+8      	; 0x644 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 63c:	e1 e3       	ldi	r30, 0x31	; 49
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	8a 81       	ldd	r24, Y+2	; 0x02
 642:	80 83       	st	Z, r24
			break;
		}
	}
}
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	08 95       	ret

00000652 <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
 652:	df 93       	push	r29
 654:	cf 93       	push	r28
 656:	00 d0       	rcall	.+0      	; 0x658 <GPIO_writePort+0x6>
 658:	00 d0       	rcall	.+0      	; 0x65a <GPIO_writePort+0x8>
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	89 83       	std	Y+1, r24	; 0x01
 660:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 662:	89 81       	ldd	r24, Y+1	; 0x01
 664:	84 30       	cpi	r24, 0x04	; 4
 666:	90 f5       	brcc	.+100    	; 0x6cc <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	28 2f       	mov	r18, r24
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	3c 83       	std	Y+4, r19	; 0x04
 670:	2b 83       	std	Y+3, r18	; 0x03
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	9c 81       	ldd	r25, Y+4	; 0x04
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	91 05       	cpc	r25, r1
 67a:	d1 f0       	breq	.+52     	; 0x6b0 <GPIO_writePort+0x5e>
 67c:	2b 81       	ldd	r18, Y+3	; 0x03
 67e:	3c 81       	ldd	r19, Y+4	; 0x04
 680:	22 30       	cpi	r18, 0x02	; 2
 682:	31 05       	cpc	r19, r1
 684:	2c f4       	brge	.+10     	; 0x690 <GPIO_writePort+0x3e>
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	9c 81       	ldd	r25, Y+4	; 0x04
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	61 f0       	breq	.+24     	; 0x6a6 <GPIO_writePort+0x54>
 68e:	1e c0       	rjmp	.+60     	; 0x6cc <GPIO_writePort+0x7a>
 690:	2b 81       	ldd	r18, Y+3	; 0x03
 692:	3c 81       	ldd	r19, Y+4	; 0x04
 694:	22 30       	cpi	r18, 0x02	; 2
 696:	31 05       	cpc	r19, r1
 698:	81 f0       	breq	.+32     	; 0x6ba <GPIO_writePort+0x68>
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	83 30       	cpi	r24, 0x03	; 3
 6a0:	91 05       	cpc	r25, r1
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <GPIO_writePort+0x72>
 6a4:	13 c0       	rjmp	.+38     	; 0x6cc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 6a6:	eb e3       	ldi	r30, 0x3B	; 59
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	80 83       	st	Z, r24
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 6b0:	e8 e3       	ldi	r30, 0x38	; 56
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	8a 81       	ldd	r24, Y+2	; 0x02
 6b6:	80 83       	st	Z, r24
 6b8:	09 c0       	rjmp	.+18     	; 0x6cc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 6ba:	e5 e3       	ldi	r30, 0x35	; 53
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	8a 81       	ldd	r24, Y+2	; 0x02
 6c0:	80 83       	st	Z, r24
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 6c4:	e2 e3       	ldi	r30, 0x32	; 50
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	80 83       	st	Z, r24
			break;
		}
	}
}
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	cf 91       	pop	r28
 6d6:	df 91       	pop	r29
 6d8:	08 95       	ret

000006da <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num)
{
 6da:	df 93       	push	r29
 6dc:	cf 93       	push	r28
 6de:	00 d0       	rcall	.+0      	; 0x6e0 <GPIO_readPort+0x6>
 6e0:	00 d0       	rcall	.+0      	; 0x6e2 <GPIO_readPort+0x8>
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
 6e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 6e8:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	84 30       	cpi	r24, 0x04	; 4
 6ee:	90 f5       	brcc	.+100    	; 0x754 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	3c 83       	std	Y+4, r19	; 0x04
 6f8:	2b 83       	std	Y+3, r18	; 0x03
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	9c 81       	ldd	r25, Y+4	; 0x04
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	91 05       	cpc	r25, r1
 702:	d1 f0       	breq	.+52     	; 0x738 <GPIO_readPort+0x5e>
 704:	2b 81       	ldd	r18, Y+3	; 0x03
 706:	3c 81       	ldd	r19, Y+4	; 0x04
 708:	22 30       	cpi	r18, 0x02	; 2
 70a:	31 05       	cpc	r19, r1
 70c:	2c f4       	brge	.+10     	; 0x718 <GPIO_readPort+0x3e>
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	9c 81       	ldd	r25, Y+4	; 0x04
 712:	00 97       	sbiw	r24, 0x00	; 0
 714:	61 f0       	breq	.+24     	; 0x72e <GPIO_readPort+0x54>
 716:	1e c0       	rjmp	.+60     	; 0x754 <GPIO_readPort+0x7a>
 718:	2b 81       	ldd	r18, Y+3	; 0x03
 71a:	3c 81       	ldd	r19, Y+4	; 0x04
 71c:	22 30       	cpi	r18, 0x02	; 2
 71e:	31 05       	cpc	r19, r1
 720:	81 f0       	breq	.+32     	; 0x742 <GPIO_readPort+0x68>
 722:	8b 81       	ldd	r24, Y+3	; 0x03
 724:	9c 81       	ldd	r25, Y+4	; 0x04
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	91 05       	cpc	r25, r1
 72a:	81 f0       	breq	.+32     	; 0x74c <GPIO_readPort+0x72>
 72c:	13 c0       	rjmp	.+38     	; 0x754 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 72e:	e9 e3       	ldi	r30, 0x39	; 57
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	89 83       	std	Y+1, r24	; 0x01
 736:	0e c0       	rjmp	.+28     	; 0x754 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 738:	e6 e3       	ldi	r30, 0x36	; 54
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	89 83       	std	Y+1, r24	; 0x01
 740:	09 c0       	rjmp	.+18     	; 0x754 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 742:	e3 e3       	ldi	r30, 0x33	; 51
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	89 83       	std	Y+1, r24	; 0x01
 74a:	04 c0       	rjmp	.+8      	; 0x754 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 74c:	e0 e3       	ldi	r30, 0x30	; 48
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 754:	89 81       	ldd	r24, Y+1	; 0x01
}
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	cf 91       	pop	r28
 760:	df 91       	pop	r29
 762:	08 95       	ret

00000764 <PWM_Timer0_Start>:
#include"std_types.h"
#include"gpio.h"
#include"dcmotor.h"
#include<avr/io.h>

void PWM_Timer0_Start(uint8 duty_cycle){
 764:	df 93       	push	r29
 766:	cf 93       	push	r28
 768:	0f 92       	push	r0
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
 76e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
 770:	e2 e5       	ldi	r30, 0x52	; 82
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	10 82       	st	Z, r1
	OCR0= duty_cycle;
 776:	ec e5       	ldi	r30, 0x5C	; 92
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	63 e0       	ldi	r22, 0x03	; 3
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	0e 94 74 00 	call	0xe8	; 0xe8 <GPIO_setupPinDirection>
	TCCR0|=(1<<3)|(1<<6)|(1<<1)|(1<<5);
 788:	a3 e5       	ldi	r26, 0x53	; 83
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	e3 e5       	ldi	r30, 0x53	; 83
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	8a 66       	ori	r24, 0x6A	; 106
 794:	8c 93       	st	X, r24
}
 796:	0f 90       	pop	r0
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <main>:

int main(void){
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62
	DCMotor_rotate(100,2);
 7a6:	84 e6       	ldi	r24, 0x64	; 100
 7a8:	62 e0       	ldi	r22, 0x02	; 2
 7aa:	0e 94 4e 00 	call	0x9c	; 0x9c <DCMotor_rotate>
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	90 e0       	ldi	r25, 0x00	; 0
}
 7b2:	cf 91       	pop	r28
 7b4:	df 91       	pop	r29
 7b6:	08 95       	ret

000007b8 <__udivmodqi4>:
 7b8:	99 1b       	sub	r25, r25
 7ba:	79 e0       	ldi	r23, 0x09	; 9
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__udivmodqi4_ep>

000007be <__udivmodqi4_loop>:
 7be:	99 1f       	adc	r25, r25
 7c0:	96 17       	cp	r25, r22
 7c2:	08 f0       	brcs	.+2      	; 0x7c6 <__udivmodqi4_ep>
 7c4:	96 1b       	sub	r25, r22

000007c6 <__udivmodqi4_ep>:
 7c6:	88 1f       	adc	r24, r24
 7c8:	7a 95       	dec	r23
 7ca:	c9 f7       	brne	.-14     	; 0x7be <__udivmodqi4_loop>
 7cc:	80 95       	com	r24
 7ce:	08 95       	ret

000007d0 <_exit>:
 7d0:	f8 94       	cli

000007d2 <__stop_program>:
 7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <__stop_program>
